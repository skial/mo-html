	// @see https://html.spec.whatwg.org/multipage/parsing.html#data-state
	public static var data_state = Mo.rules( [
		'&' => lexer.consume( character_reference_state, data_state ),
		'<' => lexer.tokenize( tag_open_state ),
		NULL => Const(CString(lexer.currentInputCharacter)),
		'' => EOF,
		'[^&<]' => Const(CString(lexer.currentInputCharacter)),
	] );

	// @see https://html.spec.whatwg.org/multipage/parsing.html#rcdata-state
	public static var rcdata_state = Mo.rules( [
		'&' => lexer.consume( character_reference_state, rcdata_state ),
		'<' => lexer.tokenize( rcdata_less_than_sign_state ),
		NULL => Const(CString('\uFFFD')),
		'' => EOF,
		'[^&<]' => Const(CString(lexer.currentInputCharacter)),
	] );

	// @see https://html.spec.whatwg.org/multipage/parsing.html#rawtext-state
	public static var rawtext_state = Mo.rules( [
		'<' => lexer.tokenize( rawtext_less_than_sign_state ),
		NULL => Const(CString('\uFFFD')),
		'' => EOF,
		'[^&<]' => Const(CString(lexer.currentInputCharacter)),
	] );

	// @see https://html.spec.whatwg.org/multipage/parsing.html#script-data-state
	public static var script_data_state = Mo.rules( [
		'<' => lexer.tokenize( script_data_less_than_sign_state ),
		NULL => Const(CString('\uFFFD')),
		'' => EOF,
		'[^&<]' => Const(CString(lexer.currentInputCharacter)),
	] );

	// @see https://html.spec.whatwg.org/multipage/parsing.html#plaintext-state
	public static var plaintext_state = Mo.rules( [
		NULL => Const(CString('\uFFFD')),
		'' => EOF,
		'[^&<]' => Const(CString(lexer.current)),
	] );

	// @see https://html.spec.whatwg.org/multipage/parsing.html#tag-open-state
	public static var tag_open_state = Mo.rules( [
		'!' => lexer.tokenize( markup_declaration_open_state ),
		'/' => lexer.tokenize( end_tag_open_state ),
		'[a-zA-Z]' => {
			lexer.currentToken = StartTag( makeTag() );
			lexer.reconsume( tag_name_state );
		},
		'?' => {
			lexer.currentToken = Comment({data:''});
			lexer.reconsume( bogus_comment_state );
		},
		'' => {
			lexer.emitToken(EOF);
			Keyword( Character({data:'<'}) );
		},
		'[^!\\/a-zA-Z\\?]' => {
			lexer.emitString('<');
			lexer.reconsume( data_state );
		},
	] );

	// @see https://html.spec.whatwg.org/multipage/parsing.html#end-tag-open-state
	public static var end_tag_open_state = Mo.rules( [
		'[a-zA-Z]' => {
			lexer.currentToken = EndTag( makeTag() );
			lexer.reconsume( tag_name_state );
		},
		'>' => lexer.tokenize( data_state ),
		'' => {
			lexer.emitString('<');
			lexer.emitString('/');
			EOF;
		},
		'[^a-zA-Z>]' => {
			lexer.currentToken = Comment( {data:''} );
			lexer.reconsume( bogus_comment_state );
		},
	] );

	// @see https://html.spec.whatwg.org/multipage/parsing.html#tag-name-state
	public static var tag_name_state = Mo.rules( [
		'[\t\n \u000C]' => lexer.tokenize( before_attribute_name_state ),
		'/' => lexer.tokenize( self_closing_start_tag_state ),
		'>' = {
			lexer.backpressure.push( data_state );
			Keyword(lexer.lastTag = lexer.currentToken);
		},
		'[A-Z]' => {
			switch lexer.currentToken {
				case StartTag(data) | EndTag(data):
					data.name += lexer.current.toLowerCase();

				case x:
					trace( x );
			}
			lexer.tokenize( tag_name_state );
		},
		NULL => {
			switch lexer.currentToken {
				case StartTag(data) | EndTag(data):
					data.name += '\uFFFD';

				case x:
					trace( x );
			}
			lexer.tokenize( tag_name_state );
		},
		'' => EOF,
		'[^\t\n \u000C/>A-Z]' => {
			switch lexer.currentToken {
				case StartTag(data) | EndTag(data):
					data.name += lexer.current;

				case x:
					trace( x );
			}
			lexer.tokenize( tag_name_state );
		},
	] );

	// @see https://html.spec.whatwg.org/multipage/parsing.html#rcdata-less-than-sign-state
	public static var rcdata_less_than_sign_state = Mo.rules( [
		'/' => {
			lexer.temporaryBuffer = '';
			lexer.reconsume( rcdata_end_tag_open_state );
		},
		'[^/]' => {
			lexer.emitString('<');
			lexer.reconsume( rcdata_state );
		},
	] );

	// @see https://html.spec.whatwg.org/multipage/parsing.html#rcdata-end-tag-open-state
	public static var rcdata_end_tag_open_state = Mo.rules( [
		'[a-zA-Z]' => {
			lexer.currentToken = EndTag( makeTag() );
			lexer.reconsume( rcdata_end_tag_name_state );
		},
		'[^a-zA-Z]' => {
			lexer.emitString('<');
			lexer.emitString('/');
			lexer.reconsume( rcdata_state );
		},
	] );

	// @see https://html.spec.whatwg.org/multipage/parsing.html#rcdata-end-tag-name-state
	public static var rcdata_end_tag_name_state = Mo.rules( [
		'[\t\n\u000C ]' => {
			if (lexer.isAppropiateEndTag()) {
				lexer.tokenize( before_attribute_name_state );

			} else {
				lexer.emitString('<');
				lexer.emitString('/');
				lexer.emitString( lexer.temporaryBuffer );
				lexer.reconsume( rcdata_state );

			}
		},
		'/' => {
			if (lexer.isAppropiateEndTag()) {
				lexer.tokenize( self_closing_start_tag_state );

			} else {
				lexer.emitString('<');
				lexer.emitString('/');
				lexer.emitString( lexer.temporaryBuffer );
				lexer.reconsume( rcdata_state );

			}
		},
		'>' => {
			if (lexer.isAppropiateEndTag()) {
				lexer.emitToken( Keyword(lexer.currentToken) );
				lexer.tokenize( data_state );

			} else {
				lexer.emitString('<');
				lexer.emitString('/');
				lexer.emitString( lexer.temporaryBuffer );
				lexer.reconsume( rcdata_state );

			}
		},
		'[A-Z]' => {
			switch lexer.currentToken {
				case StartTag(data) | EndTag(data):
					data.name += lexer.current.toLowerCase();

				case x:
					trace(x);

			}
			lexer.temporaryBuffer += lexer.current;
			lexer.tokenize( rcdata_end_tag_name_state );
		},
		'[a-z]' => {
			switch lexer.currentToken {
				case StartTag(data) | EndTag(data):
					data.name += lexer.current;

				case x:
					trace(x);

			}
			lexer.temporaryBuffer += lexer.current;
			lexer.tokenize( rcdata_end_tag_name_state );
		},
		'[^\t\n\u000C />A-Za-z]' => {
			lexer.emitString('<');
			lexer.emitString('/');
			lexer.emitString( lexer.temporaryBuffer );
			lexer.reconsume( rcdata_state );
		},
	] );

	// @see https://html.spec.whatwg.org/multipage/parsing.html#rawtext-less-than-sign-state
	public static var rawtext_less_than_sign_state = Mo.rules( [
		'/' => {
			lexer.temporaryBuffer = '';
			lexer.tokenize( rawtext_end_tag_open_state );
		},
		'[^/]' => {
			lexer.emitString('<');
			lexer.reconsume( rawtext_state );
		},
	] );

	// @see https://html.spec.whatwg.org/multipage/parsing.html#rawtext-end-tag-open-state
	public static var rawtext_end_tag_open_state = Mo.rules( [
		'[a-z]' => {
			lexer.currentToken = EndTag( makeTag() );
			lexer.reconsume( rawtext_end_tag_name_state );
		},
		'[^a-z]' => {
			lexer.emitString('<');
			lexer.emitString('/');
			lexer.reconsume( rawtext_state );
		},
	] );

	// @see https://html.spec.whatwg.org/multipage/parsing.html#rawtext-end-tag-name-state
	public static var rawtext_end_tag_name_state = Mo.rules( [
		'[\t\n\u000C ]' => {
			if (lexer.isAppropiateEndTag()) {
				lexer.tokenize( before_attribute_name_state );

			} else {
				lexer.emitString('<');
				lexer.emitString('/');
				lexer.emitString( lexer.temporaryBuffer );
				lexer.reconsume( rawtext_state );

			}
		},
		'/' => {
			if (lexer.isAppropiateEndTag()) {
				lexer.tokenize( self_closing_start_tag_state );

			} else {
				lexer.emitString('<');
				lexer.emitString('/');
				lexer.emitString( lexer.temporaryBuffer );
				lexer.reconsume( rawtext_state );

			}
		},
		'>' => {
			if (lexer.isAppropiateEndTag()) {
				lexer.emitToken( Keyword( lexer.currentToken ) );
				lexer.tokenize( data_state );

			} else {
				lexer.emitString('<');
				lexer.emitString('/');
				lexer.emitString( lexer.temporaryBuffer );
				lexer.reconsume( rawtext_state );

			}
		},
		NULL => {
			lexer.emitString('\uFFFD');
			lexer.tokenize( script_data_double_escaped_state );
		},
		'' => EOF,
		'[^\t\n\u000C />]' => {
			lexer.emitString(lexer.current);
			lexer.tokenize( script_data_double_escaped_state );
		},
	] );

	// @see https://html.spec.whatwg.org/multipage/parsing.html#script-data-less-than-sign-state
	public static var script_data_less_than_sign_state = Mo.rules( [
		'/' => /*temp buffer*/ lexer.token( script_data_end_tag_open_state ),
		'!' => /*emit `<` and `!`*/ lexer.token( script_data_escape_start_state ),
		'[^/!]+' => /*emit `<`*/ /*reconsume*/ lexer.token( script_data_state ),
	] );

	// @see https://html.spec.whatwg.org/multipage/parsing.html#script-data-end-tag-open-state
	public static var script_data_end_tag_open_state = Mo.rules( [
		'[a-z]' => /*reconsume*/ lexer.token( script_data_end_tag_name_state ),
		'[^a-z]+' => /*emit `<` and `/`*/ /*reconsume*/ lexer.token( script_data_state ),
	] );

	// @see https://html.spec.whatwg.org/multipage/parsing.html#script-data-end-tag-name-state
	public static var script_data_end_tag_name_state = Mo.rules( [
		'[\t\n\u000C ]' => null,
		'/' => null,
		'>' => null,
		'[A-Z]' => null,
		'[a-z]' => null,
		'[^\t\n\u000C />A-Za-z]+' => null,
	] );

	// @see https://html.spec.whatwg.org/multipage/parsing.html#script-data-escape-start-state
	public static var script_data_escape_start_state = Mo.rules( [
		'\\-' => /*emit `-`*/ lexer.token( script_data_escape_start_dash_state ),
		'[^\\-]+' => /*reconsume*/ lexer.token( script_data_state ),
	] );

	// @see https://html.spec.whatwg.org/multipage/parsing.html#script-data-escape-start-dash-state
	public static var script_data_escape_start_dash_state = Mo.rules( [
		'\\-' => lexer.token( script_data_escaped_dash_dash_state ), /*emit `-`*/
		'[^\\-]+' => /*reconsume*/ lexer.token( script_data_state ),
	] );

	// @see https://html.spec.whatwg.org/multipage/parsing.html#script-data-escaped-state
	public static var script_data_escaped_state = Mo.rules( [
		'\\-' => null,
		'<' => null,
		// null character
		// EOF
		'[^\\-<]' => Const(CString(lexer.current)),
	] );

	// @see https://html.spec.whatwg.org/multipage/parsing.html#script-data-escaped-dash-state
	public static var script_data_escaped_dash_state = Mo.rules( [
		'\\-' => null,
		'<' => null,
		// null character
		// EOF
		'[^\\-<]' => null,
	] );

	// @see https://html.spec.whatwg.org/multipage/parsing.html#script-data-escaped-dash-dash-state
	public static var script_data_escaped_dash_dash_state = Mo.rules( [
		'\\-' => null,
		'<' => null,
		'>' => null,
		// null character
		// EOF
		'[^\\-<>]' => null,
	] );

	// @see https://html.spec.whatwg.org/multipage/parsing.html#script-data-escaped-less-than-sign-state
	public static var script_data_escaped_less_than_sign_state = Mo.rules( [
		'/' => /*temp buff*/ lexer.token( script_data_escaped_end_tag_open_state ),
		'[a-zA-Z]' => /*temp buff*/ /*emit `<`*/ /*reconsume*/ lexer.token( script_data_double_escape_start_state ),
		'[^/a-zA-Z]' => /* `<`*/ /*reconsume*/ lexer.token( script_data_escaped_state ),
	] );

	// @see https://html.spec.whatwg.org/multipage/parsing.html#script-data-escaped-end-tag-open-state
	public static var script_data_escaped_end_tag_open_state = Mo.rules( [
		'[a-zA-Z]' => /*reconsume*/ lexer.token( script_data_escaped_end_tag_name_state ),
		'[^a-zA-Z]' => /*emit `<` and `/`*/ /*reconsume*/ lexer.token( script_data_escaped_state ),
	] );

	// @see https://html.spec.whatwg.org/multipage/parsing.html#script-data-escaped-end-tag-name-state
	public static var script_data_escaped_end_tag_name_state = Mo.rules( [
		'[\t\n\u000C ]' => null,
		'/' => null,
		'>' => null,
		'[A-Z]' => null,
		'[a-z]' => null,
		'[^\t\n\u000C />A-Za-z]' => null,
	] );

	// @see https://html.spec.whatwg.org/multipage/parsing.html#script-data-double-escape-start-state
	public static var script_data_double_escape_start_state = Mo.rules( [
		'[\t\n\u000C />]' => null,
		'[A-Z]' => null,
		'[a-z]' => null,
		'[^\t\n\u000C />A-Za-z]' => null,
	] );

	// @see https://html.spec.whatwg.org/multipage/parsing.html#script-data-double-escaped-state
	public static var script_data_double_escaped_state = Mo.rules( [
		'\\-' => null,
		'<' => null,
		// null character
		// EOF
		'[^\\-<]' => Const(CString(lexer.current)),
	] );

	// @see https://html.spec.whatwg.org/multipage/parsing.html#script-data-double-escaped-dash-state
	public static var script_data_double_escaped_dash_state = Mo.rules( [
		'\\-' => null,
		'<' => null,
		// null character
		// EOF
		'[^\\-<]' => null,
	] );

	// @see https://html.spec.whatwg.org/multipage/parsing.html#script-data-double-escaped-dash-dash-state
	public static var script_data_double_escaped_dash_dash_state = Mo.rules( [] );

	// @see https://html.spec.whatwg.org/multipage/parsing.html#script-data-double-escaped-less-than-sign-state
	public static var script_data_double_escaped_less_than_sign_state = Mo.rules( [
		'/' => {
			lexer.temporaryBuffer = '';
			lexer.emitString('/');
			lexer.tokenize( script_data_double_escape_end_state );
		},
		'[^/]' => lexer.reconsume( script_data_double_escaped_state ),
	] );

	// @see https://html.spec.whatwg.org/multipage/parsing.html#script-data-double-escape-end-state
	public static var script_data_double_escape_end_state = Mo.rules( [
		'[\t\n\u000C />]' => {
			lexer.emitString(lexer.current);
			if (lexer.temporaryBuffer == 'script') {
				lexer.tokenize( script_data_escaped_state );

			} else {
				lexer.tokenize( script_data_double_escaped_state );

			}
		},
		'[A-Z]' => {
			lexer.temporaryBuffer += lexer.current.toLowerCase();
			Keyword(Character({data:lexer.currentInputCharacter}));
		},
		'[a-z]' => {
			lexer.temporaryBuffer += lexer.current;
			Keyword(Character({data:lexer.currentInputCharacter}));
		},
		'[^\t\n\u000C />A-Za-z]' => lexer.reconsume( script_data_double_escaped_state ),
	] );

	// @see https://html.spec.whatwg.org/multipage/parsing.html#before-attribute-name-state
	public static var before_attribute_name_state = Mo.rules( [
		'[\t\n\u000C ]' => lexer.tokenize( before_attribute_name_state ),
		'[/>]' => lexer.reconsume( after_attribute_name_state ),
		'' => lexer.reconsume( after_attribute_name_state ),
		'=' => {
			/*error*/
			switch lexer.currentToken {
				case StartTag(data) | EndTag(data):
					data.attributes.push( {name: lexer.currentInputCharacter, value: ''} );

				case x:
					trace( x );
			}
			lexer.tokenize( attribute_name_state );
		},
		'[^\t\n\u000C />=]' => {
			switch lexer.currentToken {
				case StartTag(data) | EndTag(data):
					data.attributes.push( {name:'', value:''} );

				case x:
					trace( x );
			}
			lexer.reconsume( attribute_name_state );
		}
	] );

	// @see https://html.spec.whatwg.org/multipage/parsing.html#attribute-name-state
	public static var attribute_name_state = Mo.rules( [
		'[\t\n\u000C />]' => lexer.reconsume( after_attribute_name_state ),
		'' => lexer.reconsume( after_attribute_name_state ),
		'=' => lexer.tokenize( before_attribute_value_state ),
		'[A-Z]' => {
			switch lexer.currentToken {
				case StartTag(data) | EndTag(data):
					data.attributes[data.attributes.length - 1].name += lexer.currentInputCharacter.toLowerCase();
				
				case x:
					trace( x );
			}
			lexer.tokenize( attribute_name_state );
		},
		NULL => {
			switch lexer.currentToken {
				case StartTag(data) | EndTag(data):
					data.attributes[data.attributes.length - 1].name += '\uFFFD';
				
				case x:
					trace( x );
			}
			lexer.tokenize( attribute_name_state );
		},
		'["\u0027<]' => {
			switch lexer.currentToken {
				case StartTag(data) | EndTag(data):
					data.attributes[data.attributes.length - 1].name += lexer.currentInputCharacter.toLowerCase();
				
				case x:
					trace( x );
			}
			lexer.tokenize( attribute_name_state );
		},
		'[^\t\n\u000C />=A-Z$NULL"\u0027<]' => {
			switch lexer.currentToken {
				case StartTag(data) | EndTag(data):
					data.attributes[data.attributes.length - 1].name += lexer.currentInputCharacter.toLowerCase();
				
				case x:
					trace( x );
			}
			lexer.tokenize( attribute_name_state );
		},
	] );

	// @see https://html.spec.whatwg.org/multipage/parsing.html#after-attribute-name-state
	public static var after_attribute_name_state = Mo.rules( [
		'[\t\n\u000C]' => lexer.tokenize( after_attribute_name_state ),
		'/' => lexer.tokenize( self_closing_start_tag_state ),
		'=' => lexer.tokenize( before_attribute_value_state ),
		'>' => {
			lexer.emitToken( Keyword(lexer.currentToken) );
			lexer.tokenize( data_state );
		},
		'' => /* error */ EOF,
		'[^\t\n\u000C /=>]' => {
			switch lexer.currentToken {
				case StartTag(data) | EndTag(data):
					data.attributes.push( {name:'', value: ''} );

				case x:
					trace( x );
			}
			lexer.reconsume( attribute_name_state );
		}
	] );

	// @see https://html.spec.whatwg.org/multipage/parsing.html#before-attribute-value-state
	public static var before_attribute_value_state = Mo.rules( [
		'[\t\n\u000C ]' => lexer.tokenize( before_attribute_value_state ),
		'"' => lexer.tokenize( attribute_value_double_quoted_state ),
		'\u0027' => lexer.tokenize( attribute_value_single_quoted_state ),
		'>' => {
			/* error */
			lexer.emitToken( Keyword(lexer.currentToken) );
			lexer.tokenize( data_state );
		},
		'[^\t\n\u000C "\u0027>]' => lexer.reconsume( attribute_value_unquoted_state ),
	] );

	// @see https://html.spec.whatwg.org/multipage/parsing.html#attribute-value-(double-quoted)-state
	public static var attribute_value_double_quoted_state = Mo.rules( [
		'"' => lexer.tokenize( after_attribute_value_quoted_state ),
		'&' => lexer.consume( character_reference_state, attribute_value_double_quoted_state ),
		NULL => {
			/* error */
			switch lexer.currentToken {
				case StartTag(data) | EndTag(data):
					data.attributes[data.attributes.length - 1].value += '\uFFFD';

				case x:
					trace( x );
			}
			lexer.tokenize( attribute_value_double_quoted_state );
		},
		'' => /* error */ EOF,
		'[^"&$NULL]' => {
			switch lexer.currentToken {
				case StartTag(data) | EndTag(data):
					data.attributes[data.attributes.length - 1].value += lexer.currentInputCharacter;

				case x:
					trace( x );
			}
			lexer.tokenize( attribute_value_double_quoted_state );
		}
	] );

	// @see https://html.spec.whatwg.org/multipage/parsing.html#attribute-value-(single-quoted)-state
	public static var attribute_value_single_quoted_state = Mo.rules( [
		'\u0027' => lexer.tokenize( after_attribute_value_quoted_state ),
		'&' => lexer.consume( character_reference_state, attribute_value_single_quoted_state ),
		NULL => {
			/* error */
			switch lexer.currentToken {
				case StartTag(data) | EndTag(data):
					data.attributes[data.attributes.length - 1].value += '\uFFFD';

				case x:
					trace( x );
			}
			lexer.tokenize( attribute_value_single_quoted_state );
		},
		'' => /* error */ EOF,
		'[^\u0027&$NULL]' => {
			switch lexer.currentToken {
				case StartTag(data) | EndTag(data):
					data.attributes[data.attributes.length - 1].value += lexer.currentInputCharacter;

				case x:
					trace( x );
			}
			lexer.tokenize( attribute_value_single_quoted_state );
		}
	] );

	// @see https://html.spec.whatwg.org/multipage/parsing.html#attribute-value-(unquoted)-state
	public static var attribute_value_unquoted_state = Mo.rules( [
		'[\t\n\u000C ]' => lexer.tokenize( before_attribute_name_state ),
		'&' => lexer.consume( character_reference_state, attribute_value_unquoted_state ),
		'>' => {
			lexer.emitToken( Keyword(lexer.currentToken) );
			lexer.tokenize( data_state );
		},
		NULL => {
			/* error */
			switch lexer.currentToken {
				case StartTag(data) | EndTag(data):
					data.attributes[data.attributes.length - 1].value += '\uFFFD';

				case x:
					trace( x );
			}
			lexer.tokenize( attribute_value_unquoted_state );
		},
		'["\u0027<=`]' => {
			/* error */
			switch lexer.currentToken {
				case StartTag(data) | EndTag(data):
					data.attributes[data.attributes.length - 1].value += lexer.currentInputCharacter;

				case x:
					trace( x );
			}
			lexer.tokenize( attribute_value_unquoted_state );
		},
		'' => EOF,
		'[^\t\n\u000C &$NULL"\u0027<=`]' => {
			switch lexer.currentToken {
				case StartTag(data) | EndTag(data):
					data.attributes[data.attributes.length - 1].value += '\uFFFD';

				case x:
					trace( x );
			}
			lexer.tokenize( attribute_value_unquoted_state );
		}
	] );

	// @see https://html.spec.whatwg.org/multipage/parsing.html#after-attribute-value-(quoted)-state
	public static var after_attribute_value_quoted_state = Mo.rules( [
		'[\t\n\u000C ]' => lexer.tokenize( before_attribute_name_state ),
		'/' => lexer.tokenize( self_closing_start_tag_state ),
		'>' => {
			lexer.emitToken( Keyword(lexer.currentToken) );
			lexer.tokenize( data_state );
		},
		'' => EOF,
		'[^\t\n\u000C />]' => {
			/* error */
			lexer.reconsume( before_attribute_name_state );
		}
	] );

	// @see https://html.spec.whatwg.org/multipage/parsing.html#self-closing-start-tag-state
	public static var self_closing_start_tag_state = Mo.rules( [
		'>' => {
			switch lexer.currentToken {
				case StartTag(data) | EndTag(data):
					data.selfClosing = true;
					lexer.emitToken( Keyword(lexer.currentToken) );

				case x:
					trace( x );
			}
			lexer.tokenize( data_state );
		},
		'' => EOF,
		'[^>]' => {
			/* error */
			lexer.reconsume( before_attribute_name_state );
		}
	] );

	// @see https://html.spec.whatwg.org/multipage/parsing.html#bogus-comment-state
	public static var bogus_comment_state = Mo.rules( [
		'>' => {
			lexer.emitToken( Keyword(lexer.currentToken) );
			lexer.tokenize( data_state );
		},
		'' => EOF,
		NULL => {
			/* error */
			switch lexer.currentToken {
				case Comment(data):
					data.data += '\uFFFD';
				
				case x:
					trace( x );
			}
			lexer.tokenize( bogus_comment_state );
		},
		'[^>$NULL]' => {
			switch lexer.currentToken {
				case Comment(data):
					data.data += lexer.currentInputCharacter;
				
				case x:
					trace( x );
			}
			lexer.tokenize( bogus_comment_state );
		}
	] );

	// @see https://html.spec.whatwg.org/multipage/parsing.html#markup-declaration-open-state
	public static var markup_declaration_open_state = Mo.rules( [
		'\u002D\u002D' => {
			lexer.currentToken = Comment({data:''});
			lexer.tokenize( comment_start_state );
		},
		'(d|D)(o|O)(c|C)(t|T)(y|Y)(p|P)(e|E)' => {
			lexer.tokenize( doctype_state );
		},
		'\u005B(c|C)(d|D)(a|A)(t|T)(a|A)\u005B' => {
			// TODO check against `adjusted current node`.
			lexer.currentToken = Comment({data:'[CDATA['});
			lexer.tokenize( bogus_comment_state );
		},
		'.' => {
			/* error */
			lexer.currentToken = Comment({data:''});
			lexer.tokenize( bogus_comment_state );
			// TODO check this note: > (don't consume anything in the current state).
		}
	] );

	// @see https://html.spec.whatwg.org/multipage/parsing.html#comment-start-state
	public static var comment_start_state = Mo.rules( [
		'\u002D' => lexer.tokenize( comment_start_dash_state ),
		'>' => {
			/* error */
			lexer.emitToken( Keyword(lexer.currentToken) );
			lexer.tokenize( data_state );
		},
		'[^->]' => lexer.reconsume( comment_state ),
	] );

	// @see https://html.spec.whatwg.org/multipage/parsing.html#comment-start-dash-state
	public static var comment_start_dash_state = Mo.rules( [
		'\u002D' => lexer.tokenize( comment_end_state ),
		'>' => {
			/* error */
			lexer.emitToken( Keyword(lexer.currentToken) );
			lexer.tokenize( data_state );
		},
		'' => {
			lexer.emitToken( Keyword(lexer.currentToken) );
			EOF;
		},
		'[^->]' => {
			switch lexer.currentToken {
				case Comment(data):
					data.data += '-';
				
				case x:
					trace( x );
			}
			lexer.reconsume( comment_state );
		}
	] );

	// @see https://html.spec.whatwg.org/multipage/parsing.html#comment-state
	public static var comment_state = Mo.rules( [
		'<' => {
			switch lexer.currentToken {
				case Comment(data):
					data.data += lexer.currentInputCharacter;

				case x:
					trace( x );
			}
			lexer.tokenize( comment_less_than_sign_state );
		},
		'\u002D' => lexer.tokenize( comment_end_dash_state ),
		NULL => {
			/* error */
			switch lexer.currentToken {
				case Comment(data):
					data.data += '\uFFFD';

				case x:
					trace( x );
			}
			lexer.tokenize( comment_state );
		},
		'' => EOF,
		'[^<\u002D$NULL]' => {
			switch lexer.currentToken {
				case Comment(data):
					data.data += lexer.currentInputCharacter;

				case x:
					trace( x );
			}
			lexer.tokenize( comment_state );
		}
	] );

	// @see https://html.spec.whatwg.org/multipage/parsing.html#comment-less-than-sign-state
	public static var comment_less_than_sign_state = Mo.rules( [
		'!' => {
			switch lexer.currentToken {
				case Comment(data):
					data.data += lexer.currentInputCharacter;

				case x:
					trace( x );
			}
			lexer.tokenize( comment_less_than_sign_bang_state );
		},
		'<' => {
			switch lexer.currentToken {
				case Comment(data):
					data.data += lexer.currentInputCharacter;

				case x:
					trace( x );
			}
			lexer.tokenize( comment_less_than_sign_bang_state );
		},
		'[^!<]' => lexer.reconsume( comment_state ),
	] );

	// @see https://html.spec.whatwg.org/multipage/parsing.html#comment-less-than-sign-bang-state
	public static var comment_less_than_sign_bang_state = Mo.rules( [
		'\u002D' => lexer.tokenize( comment_less_than_sign_bang_dash_state ),
		'[^-]' => lexer.reconsume( comment_state ),
	] );

	// @see https://html.spec.whatwg.org/multipage/parsing.html#comment-less-than-sign-bang-dash-state
	public static var comment_less_than_sign_bang_dash_state = Mo.rules( [
		'\u002D' => lexer.tokenize( comment_less_than_sign_bang_dash_dash_state ),
		'[^-]' => lexer.reconsume( comment_end_dash_state ),
	] );

	// @see https://html.spec.whatwg.org/multipage/parsing.html#comment-less-than-sign-bang-dash-dash-state
	public static var comment_less_than_sign_bang_dash_dash_state = Mo.rules( [
		'>' => lexer.reconsume( comment_end_state ),
		'' => lexer.reconsume( comment_end_state ),
		'[^>]' => {
			/* error */
			lexer.reconsume( comment_end_state );
		}
	] );

	// @see https://html.spec.whatwg.org/multipage/parsing.html#comment-end-dash-state
	public static var comment_end_dash_state = Mo.rules( [
		'\u002D' => lexer.tokenize( comment_end_state ),
		'' => {
			/* error */
			lexer.emitToken( Keyword(lexer.currentToken) );
			EOF;
		},
		'[^-]' => {
			switch lexer.currentToken {
				case Comment(data):
					data.data += '-';

				case x:
					trace( x );
			}
			lexer.reconsume( comment_state );
		}
	] );

	// @see https://html.spec.whatwg.org/multipage/parsing.html#comment-end-state
	public static var comment_end_state = Mo.rules( [
		'>' => {
			lexer.emitToken( Keyword(lexer.currentToken) );
			lexer.tokenize( data_state );
		},
		'!' => lexer.tokenize( comment_end_bang_state ),
		'\u002D' => {
			switch lexer.currentToken {
				case Comment(data):
					data.data += '-';

				case x:
					trace( x );
			}
			lexer.tokenize( comment_end_state );
		},
		'' => {
			/* error */
			lexer.emitToken( Keyword(lexer.currentToken) );
			EOF;
		},
		'[^>!\u002D]' => {
			switch lexer.currentToken {
				case Comment(data):
					data.data += '--';

				case x:
					trace( x );
			}
			lexer.reconsume( comment_state );
		}
	] );

	// @see https://html.spec.whatwg.org/multipage/parsing.html#comment-end-bang-state
	public static var comment_end_bang_state = Mo.rules( [
		'\u002D' => {
			switch lexer.currentToken {
				case Comment(data):
					data.data += '--!';

				case x:
					trace( x );
			}
			lexer.tokenize( comment_end_dash_state );
		},
		'>' => {
			/* error */
			lexer.emitToken( Keyword(lexer.currentToken) );
			lexer.tokenize( data_state );
		},
		'' => {
			/* error */
			lexer.emitToken( Keyword(lexer.currentToken) );
			EOF;
		},
		'[^->]' => {
			switch lexer.currentToken {
				case Comment(data):
					data.data += '--!';

				case x:
					trace( x );
			}
			lexer.reconsume( comment_state );
		}
	] );

	// @see https://html.spec.whatwg.org/multipage/parsing.html#doctype-state
	public static var doctype_state = Mo.rules( [
		'[\t\n\uFFFD ]' => lexer.tokenize( before_doctype_name_state ),
		'>' => lexer.reconsume( before_doctype_name_state ),
		'' => {
			/* error */
			lexer.currentToken = DOCTYPE({forceQuirks:true});
			lexer.emitToken( Keyword(lexer.currentToken) );
			EOF;
		},
		'[^\t\n\uFFFD >]' => {
			/* error */
			lexer.reconsume( before_doctype_name_state );
		}
	] );

	// @see https://html.spec.whatwg.org/multipage/parsing.html#before-doctype-name-state
	public static var before_doctype_name_state = Mo.rules( [
		'[\t\n\uFFFD ]' => lexer.tokenize( before_doctype_name_state ),
		'[A-Z]' => {
			lexer.currentToken = DOCTYPE({name:lexer.currentInputCharacter.toLowerCase(), forceQuirks:false});
			lexer.tokenize( doctype_name_state );
		},
		NULL => {
			/* error */
			lexer.currentToken = DOCTYPE({name:'\uFFFD', forceQuirks:false});
			lexer.tokenize( doctype_name_state );
		},
		'>' => {
			/* error */
			lexer.currentToken = DOCTYPE({forceQuirks:true});
			lexer.emitToken( Keyword(lexer.currentToken) );
			lexer.tokenize( data_state );
		},
		'' => {
			/* error */
			lexer.currentToken = DOCTYPE({forceQuirks:true});
			lexer.emitToken( Keyword(lexer.currentToken) );
			EOF;
		},
		'[^\t\n\uFFFD A-Z>]' => {
			lexer.currentToken = DOCTYPE({name:lexer.currentInputCharacter, forceQuirks:false});
			lexer.tokenize( doctype_name_state );
		}
	] );

	// @see https://html.spec.whatwg.org/multipage/parsing.html#doctype-name-state
	public static var doctype_name_state = Mo.rules( [
		'[\t\n\u000C ]' => lexer.tokenize( after_doctype_name_state ),
		'>' => {
			lexer.emitToken( Keyword(lexer.currentToken) );
			lexer.tokenize( data_state );
		},
		'[A-Z]' => {
			switch lexer.currentToken {
				case DOCTYPE(data):
					data.name += lexer.currentInputCharacter.toLowerCase();

				case x:
					trace( x );
			}
			lexer.tokenize( doctype_name_state );
		},
		NULL => {
			/* error */
			switch lexer.currentToken {
				case DOCTYPE(data):
					data.name += '\uFFFD';

				case x:
					trace( x );
			}
			lexer.tokenize( doctype_name_state );
		},
		EOF => {
			/* error */
			switch lexer.currentToken {
				case DOCTYPE(data):
					data.forceQuirks = true;

				case x:
					trace( x );
			}
			lexer.emitToken( Keyword(lexer.currentToken) );
			EOF;
		},
		'[^\t\n\u000C >A-Z$NULL]' => {
			switch lexer.currentToken {
				case DOCTYPE(data):
					data.name += lexer.currentInputCharacter;

				case x:
					trace( x );
			}
			lexer.tokenize( doctype_name_state );
		}
	] );

	// @see https://html.spec.whatwg.org/multipage/parsing.html#after-doctype-name-state
	public static var after_doctype_name_state = Mo.rules( [
		'[\t\n\u000C ]' => lexer.tokenize( after_doctype_name_state ),
		'>' => {
			lexer.emitToken( Keyword(lexer.currentToken) );
			lexer.tokenize( data_state );
		},
		'' => {
			/* error */
			switch lexer.currentToken {
				case DOCTYPE(data):
					data.forceQuirks = true;

				case x:
					trace( x );
			}

			lexer.emitToken( Keyword(lexer.currentToken) );
			EOF;
		},
		/** see Anything section **/
		'(p|P)(u|U)(b|B)(l|L)(i|I)(c|C)' => lexer.tokenize( after_doctype_public_keyword_state ),
		'(s|S)(y|Y)(s|S)(t|T)(e|E)(m|M)' => lexer.tokenize( after_doctype_system_keyword_state ),
		'[^\t\n\u000C >]' => {
			/* error */
			switch lexer.currentToken {
				case DOCTYPE(data):
					data.forceQuirks = true;

				case x:
					trace( x );
			}
			lexer.reconsume( bogus_doctype_state );
		}
	] );

	// @see https://html.spec.whatwg.org/multipage/parsing.html#after-doctype-public-keyword-state
	public static var after_doctype_public_keyword_state = Mo.rules( [
		'[\n\t\u000C ]' => lexer.tokenize( before_doctype_public_identifier_state ),
		'"' => {
			/* error */
			switch lexer.currentToken {
				case DOCTYPE(data):
					data.publicId = '';

				case x:
					trace( x );
			}
			lexer.tokenize( doctype_public_identifier_double_quoted_state );
		},
		'\u0027' => {
			/* error */
			switch lexer.currentToken {
				case DOCTYPE(data):
					data.publicId = '';

				case x:
					trace( x );
			}
			lexer.tokenize( doctype_public_identifier_single_quoted_state );
		},
		'>' => {
			/* error */
			switch lexer.currentToken {
				case DOCTYPE(data):
					data.forceQuirks = true;

				case x:
					trace( x );
			}
			lexer.emitToken( Keyword(lexer.currentToken) );
			lexer.tokenize( data_state );
		},
		'' => {
			/* error */
			switch lexer.currentToken {
				case DOCTYPE(data):
					data.forceQuirks = true;

				case x:
					trace( x );
			}
			lexer.emitToken( Keyword(lexer.currentToken) );
			EOF;
		},
		'[^\t\n\u000C "\u0022>]' => {
			/* error */
			switch lexer.currentToken {
				case DOCTYPE(data):
					data.forceQuirks = true;

				case x:
					trace( x );
			}
			lexer.reconsume( bogus_doctype_state );
		}
	] );

	// @see https://html.spec.whatwg.org/multipage/parsing.html#before-doctype-public-identifier-state
	public static var before_doctype_public_identifier_state = Mo.rules( [
		'[\t\n\u000C ]' => lexer.tokenize( before_doctype_public_identifier_state ),
		'"' => {
			switch lexer.currentToken {
				case DOCTYPE(data):
					data.publicId = '';

				case x:
					trace( x );
			}
			lexer.tokenize( doctype_public_identifier_double_quoted_state );
		},
		'\u0027' => {
			switch lexer.currentToken {
				case DOCTYPE(data):
					data.publicId = '';

				case x:
					trace( x );
			}
			lexer.tokenize( doctype_public_identifier_single_quoted_state );
		},
		'>' => {
			/* error */
			switch lexer.currentToken {
				case DOCTYPE(data):
					data.forceQuirks = true;

				case x:
					trace( x );
			}
			lexer.emitToken( Keyword(lexer.currentToken) );
			lexer.tokenize( data_state );
		},
		'' => {
			/* error */
			switch lexer.currentToken {
				case DOCTYPE(data):
					data.forceQuirks = true;

				case x:
					trace( x );
			}
			lexer.emitToken( Keyword(lexer.currentToken) );
			EOF;
		},
		'[^\t\n\u000C "\u0027>]' => {
			/* error */
			switch lexer.currentToken {
				case DOCTYPE(data):
					data.forceQuirks = true;

				case x:
					trace( x );
			}
			lexer.reconsume( bogus_doctype_state );
		}
	] );

	// @see https://html.spec.whatwg.org/multipage/parsing.html#doctype-public-identifier-(double-quoted)-state
	public static var doctype_public_identifier_double_quoted_state = Mo.rules( [
		'"' => lexer.tokenize( after_doctype_public_identifier_state ),
		NULL => {
			/* error */
			switch lexer.currentToken {
				case DOCTYPE(data):
					data.publicId += '\uFFFD';

				case x:
					trace( x );
			}
			lexer.tokenize( doctype_public_identifier_double_quoted_state );
		},
		'>' => {
			/* error */
			switch lexer.currentToken {
				case DOCTYPE(data):
					data.forceQuirks = true;

				case x:
					trace( x );
			}
			lexer.emitToken( Keyword(lexer.currentToken) );
			lexer.tokenize( data_state );
		},
		'' => {
			/* error */
			switch lexer.currentToken {
				case DOCTYPE(data):
					data.forceQuirks = true;

				case x:
					trace( x );
			}
			lexer.emitToken( Keyword(lexer.currentToken) );
			EOF;
		},
		'[^"$NULL>]' => {
			switch lexer.currentToken {
				case DOCTYPE(data):
					data.publicId += lexer.currentInputCharacter;

				case x:
					trace( x );
			}
			lexer.tokenize( doctype_public_identifier_double_quoted_state );
		}
	] );

	// @see https://html.spec.whatwg.org/multipage/parsing.html#doctype-public-identifier-(single-quoted)-state
	public static var doctype_public_identifier_single_quoted_state = Mo.rules( [
		'\u0027' => lexer.tokenize( after_doctype_public_identifier_state ),
		NULL => {
			/* error */
			switch lexer.currentToken {
				case DOCTYPE(data):
					data.publicId += '\uFFFD';

				case x:
					trace( x );
			}
			lexer.tokenize( doctype_public_identifier_single_quoted_state );
		},
		'>' => {
			/* error */
			switch lexer.currentToken {
				case DOCTYPE(data):
					data.forceQuirks = true;

				case x:
					trace( x );
			}
			lexer.emitToken( Keyword(lexer.currentToken) );
			lexer.tokenize( data_state );
		},
		'' => {
			/* error */
			switch lexer.currentToken {
				case DOCTYPE(data):
					data.forceQuirks = true;

				case x:
					trace( x );
			}
			lexer.emitToken( Keyword(lexer.currentToken) );
			EOF;
		},
		'[^\u0027$NULL>]' => {
			switch lexer.currentToken {
				case DOCTYPE(data):
					data.publicId += lexer.currentInputCharacter;

				case x:
					trace( x );
			}
			lexer.tokenize( doctype_public_identifier_single_quoted_state );
		}
	] );

	// @see https://html.spec.whatwg.org/multipage/parsing.html#after-doctype-public-identifier-state
	public static var after_doctype_public_identifier_state = Mo.rules( [
		'[\t\n\u000C ]' => lexer.tokenize( between_doctype_public_and_system_identifiers_state ),
		'>' => {
			lexer.emitToken( Keyword(lexer.currentToken) );
			lexer.tokenize( data_state );
		},
		'"' => {
			/* error */
			switch lexer.currentToken {
				case DOCTYPE(data):
					data.systemId = '';

				case x:
					trace( x );
			}
			lexer.tokenize( doctype_system_identifier_double_quoted_state );
		},
		'\u0027' => {
			/* error */
			switch lexer.currentToken {
				case DOCTYPE(data):
					data.systemId = '';

				case x:
					trace( x );
			}
			lexer.tokenize( doctype_system_identifier_single_quoted_state );
		},
		'' => {
			/* error */
			switch lexer.currentToken {
				case DOCTYPE(data):
					data.forceQuirks = true;

				case x:
					trace( x );
			}
			lexer.emitToken( Keyword(lexer.currentToken) );
			EOF;
		},
		'[^\t\n\u000C >"\u0027]' => {
			/* error */
			switch lexer.currentToken {
				case DOCTYPE(data):
					data.forceQuirks = true;

				case x:
					trace( x );
			}
			lexer.reconsume( bogus_doctype_state );
		}
	] );

	// @see https://html.spec.whatwg.org/multipage/parsing.html#between-doctype-public-and-system-identifiers-state
	public static var between_doctype_public_and_system_identifiers_state = Mo.rules( [
		'[\t\n\u000C ]' => lexer.tokenize( between_doctype_public_and_system_identifiers_state ),
		'>' => lexer.tokenize( data_state ),
		'"' => {
			switch lexer.currentToken {
				case DOCTYPE(data):
					data.systemId = '';

				case x:
					trace( x );
			}
			lexer.tokenize( doctype_system_identifier_double_quoted_state );
		},
		'\u0027' => {
			switch lexer.currentToken {
				case DOCTYPE(data):
					data.systemId = '';

				case x:
					trace( x );
			}
			lexer.tokenize( doctype_system_identifier_single_quoted_state );
		},
		'' => {
			/* error */
			switch lexer.currentToken {
				case DOCTYPE(data):
					data.forceQuirks = true;

				case x:
					trace( x );
			}
			lexer.emitToken( Keyword(lexer.currentToken) );
			EOF;
		},
		'[^\t\n\u000C >"\u0027]' => {
			/* error */
			switch lexer.currentToken {
				case DOCTYPE(data):
					data.forceQuirks = true;

				case x:
					trace( x );
			}
			lexer.reconsume( bogus_doctype_state );
		}
	] );

	// @see https://html.spec.whatwg.org/multipage/parsing.html#after-doctype-system-keyword-state
	public static var after_doctype_system_keyword_state = Mo.rules( [
		'[\t\n\u000C ]' => lexer.tokenize( before_doctype_system_identifier_state ),
		'"' => {
			/* error */
			switch lexer.currentToken {
				case DOCTYPE(data):
					data.systemId = '';

				case x:
					trace( x );
			}
			lexer.tokenize( doctype_system_identifier_double_quoted_state );
		},
		'\u0027' => {
			/* error */
			switch lexer.currentToken {
				case DOCTYPE(data):
					data.systemId = '';

				case x:
					trace( x );
			}
			lexer.tokenize( doctype_system_identifier_single_quoted_state );
		},
		'>' => {
			/* error */
			switch lexer.currentToken {
				case DOCTYPE(data):
					data.forceQuirks = true;

				case x:
					trace( x );
			}
			lexer.emitToken( Keyword(lexer.currentToken) );
			lexer.tokenize( data_state );
		},
		'' => {
			/* error */
			switch lexer.currentToken {
				case DOCTYPE(data):
					data.forceQuirks = true;

				case x:
					trace( x );
			}
			lexer.emitToken( Keyword(lexer.currentToken) );
			EOF;
		},
		'[^\t\n\u000C "\u0027>]' => {
			/* error */
			switch lexer.currentToken {
				case DOCTYPE(data):
					data.forceQuirks = true;

				case x:
					trace( x );
			}
			lexer.reconsume( bogus_doctype_state );
		}
	] );

	// @see https://html.spec.whatwg.org/multipage/parsing.html#before-doctype-system-identifier-state
	public static var before_doctype_system_identifier_state = Mo.rules( [
		'[\t\n\u000C ]' => lexer.tokenize( before_doctype_system_identifier_state ),
		'"' => {
			switch lexer.currentToken {
				case DOCTYPE(data):
					data.systemId = '';

				case x:
					trace( x );
			}
			lexer.tokenize( doctype_system_identifier_double_quoted_state );
		},
		'\u0027' => {
			switch lexer.currentToken {
				case DOCTYPE(data):
					data.systemId = '';

				case x:
					trace( x );
			}
			lexer.tokenize( doctype_system_identifier_single_quoted_state );
		},
		'>' => {
			/* error */
			switch lexer.currentToken {
				case DOCTYPE(data):
					data.forceQuirks = true;

				case x:
					trace( x );
			}
			lexer.emitToken( Keyword(lexer.currentToken) );
			lexer.tokenize( data_state );
		},
		'' => {
			/* error */
			switch lexer.currentToken {
				case DOCTYPE(data):
					data.forceQuirks = true;

				case x:
					trace( x );
			}
			lexer.emitToken( Keyword(lexer.currentToken) );
			EOF;
		},
		'[^\t\n\u000C "\u0027>]' => {
			/* error */
			switch lexer.currentToken {
				case DOCTYPE(data):
					data.forceQuirks = true;

				case x:
					trace( x );
			}
			lexer.reconsume( bogus_doctype_state );
		}
	] );

	// @see https://html.spec.whatwg.org/multipage/parsing.html#doctype-system-identifier-(double-quoted)-state
	public static var doctype_system_identifier_double_quoted_state = Mo.rules( [
		'"' => lexer.tokenize( after_doctype_system_identifier_state ),
		NULL => {
			/* error */
			switch lexer.currentToken {
				case DOCTYPE(data):
					data.systemId += '\uFFFD';

				case x:
					trace( x );
			}
			lexer.tokenize( doctype_system_identifier_double_quoted_state );
		},
		'>' => {
			/* error */
			switch lexer.currentToken {
				case DOCTYPE(data):
					data.forceQuirks = true;

				case x:
					trace( x );
			}
			lexer.emitToken( Keyword(lexer.currentToken) );
			lexer.tokenize( data_state );
		},
		'' => {
			/* error */
			switch lexer.currentToken {
				case DOCTYPE(data):
					data.forceQuirks = true;

				case x:
					trace( x );
			}
			lexer.emitToken( Keyword(lexer.currentToken) );
			EOF;
		},
		'[^"$NULL>]' => {
			switch lexer.currentToken {
				case DOCTYPE(data):
					data.systemId += lexer.currentInputCharacter;

				case x:
					trace( x );
			}
			lexer.tokenize( doctype_system_identifier_double_quoted_state );
		}
	] );

	// @see https://html.spec.whatwg.org/multipage/parsing.html#doctype-system-identifier-(single-quoted)-state
	public static var doctype_system_identifier_single_quoted_state = Mo.rules( [
		'\u0027' => lexer.tokenize( after_doctype_system_identifier_state ),
		NULL => {
			/* error */
			switch lexer.currentToken {
				case DOCTYPE(data):
					data.systemId += '\uFFFD';

				case x:
					trace( x );
			}
			lexer.tokenize( doctype_system_identifier_single_quoted_state );
		},
		'>' => {
			/* error */
			switch lexer.currentToken {
				case DOCTYPE(data):
					data.forceQuirks = true;

				case x:
					trace( x );
			}
			lexer.emitToken( Keyword(lexer.currentToken) );
			lexer.tokenize( data_state );
		},
		'' => {
			/* error */
			switch lexer.currentToken {
				case DOCTYPE(data):
					data.forceQuirks = true;

				case x:
					trace( x );
			}
			lexer.emitToken( Keyword(lexer.currentToken) );
			EOF;
		},
		'[^\u0027$NULL>]' => {
			switch lexer.currentToken {
				case DOCTYPE(data):
					data.systemId += lexer.currentInputCharacter;

				case x:
					trace( x );
			}
			lexer.tokenize( doctype_system_identifier_single_quoted_state );
		}
	] );

	// @see https://html.spec.whatwg.org/multipage/parsing.html#after-doctype-system-identifier-state
	public static var after_doctype_system_identifier_state = Mo.rules( [
		'[\t\n\u000C ]' => lexer.tokenize( after_doctype_system_identifier_state ),
		'>' => {
			lexer.emitToken( Keyword(lexer.currentToken) );
			lexer.tokenize( data_state );
		},
		'' => {
			/* error */
			switch lexer.currentToken {
				case DOCTYPE(data):
					data.forceQuirks = true;

				case x:
					trace( x );
			}
			lexer.emitToken( Keyword(lexer.currentToken) );
			EOF;
		},
		'[^\t\n\u000C >]' => {
			/* error */
			lexer.reconsume( bogus_doctype_state );
		}
	] );

	// @see https://html.spec.whatwg.org/multipage/parsing.html#bogus-doctype-state
	public static var bogus_doctype_state = Mo.rules( [
		'>' => {
			lexer.emitToken( Keyword(lexer.currentToken) );
			lexer.tokenize( data_state );
		},
		NULL => {
			/* error */
			lexer.tokenize( bogus_doctype_state );
		},
		'' => {
			lexer.emitToken( Keyword(lexer.currentToken) );
			EOF;
		},
		'[^>$NULL]' => lexer.tokenize( bogus_doctype_state ),
	] );

	// @see https://html.spec.whatwg.org/multipage/parsing.html#cdata-section-state
	public static var cdata_section_state = Mo.rules( [
		'\u005D' => lexer.tokenize( cdata_section_bracket_state ),
		'' => {
			/* error */
			EOF;
		},
		'[^\u005D]' => {
			lexer.emitString( lexer.currentInputCharacter );
			lexer.tokenize( cdata_section_state );
		}
	] );

	// @see https://html.spec.whatwg.org/multipage/parsing.html#cdata-section-bracket-state
	public static var cdata_section_bracket_state = Mo.rules( [
		'\u005D' => lexer.tokenize( cdata_section_end_state ),
		'[^\u005D]' => {
			lexer.emitString('\u005D');
			lexer.reconsume( cdata_section_state );
		}
	] );

	// @see https://html.spec.whatwg.org/multipage/parsing.html#cdata-section-end-state
	public static var cdata_section_end_state = Mo.rules( [
		'\u005D' => {
			lexer.emitString('\u005D');
			lexer.tokenize( cdata_section_end_state );
		},
		'\u003E' => lexer.tokenize( data_state ),
		'[^\u005D\u003E]' => {
			lexer.emitString('\u005D');
			lexer.emitString('\u005D');
			lexer.reconsume( cdata_section_state );
		}
	] );

	// @see https://html.spec.whatwg.org/multipage/parsing.html#character-reference-state
	public static var character_reference_state = Mo.rules( [
		'[0-9a-zA-Z]' => {
			lexer.temporaryBuffer = '&';
			lexer.reconsume( named_character_reference_state );
		},
		'#' => {
			lexer.temporaryBuffer = '&';
			lexer.temporaryBuffer += lexer.currentInputCharacter;
			lexer.tokenize( numeric_character_reference_state );
		},
		'[^0-9a-zA-Z#]' => {
			// TODO flush code points.
			lexer.tokenize( lexer.returnState );
		}
	] );

	// @see https://html.spec.whatwg.org/multipage/parsing.html#named-character-reference-state
	public static var named_character_reference_state = Mo.rules( [] );

	// @see https://html.spec.whatwg.org/multipage/parsing.html#ambiguous-ampersand-state
	public static var ambiguous_ampersand_state = Mo.rules( [] );

	// @see https://html.spec.whatwg.org/multipage/parsing.html#numeric-character-reference-state
	public static var numeric_character_reference_state = Mo.rules( [] );

	// @see https://html.spec.whatwg.org/multipage/parsing.html#hexadecimal-character-reference-start-state
	public static var hexadecimal_character_reference_start_state = Mo.rules( [] );

	// @see https://html.spec.whatwg.org/multipage/parsing.html#decimal-character-reference-start-state
	public static var decimal_character_reference_start_state = Mo.rules( [] );

	// @see https://html.spec.whatwg.org/multipage/parsing.html#hexadecimal-character-reference-state
	public static var hexadecimal_character_reference_state = Mo.rules( [] );

	// @see https://html.spec.whatwg.org/multipage/parsing.html#decimal-character-reference-state
	public static var decimal_character_reference_state = Mo.rules( [] );

	// @see https://html.spec.whatwg.org/multipage/parsing.html#numeric-character-reference-end-state
	public static var numeric_character_reference_end_state = Mo.rules( [] );